// Command gen.go generates a list of Unicode fallback substitutions
package main

import (
    "encoding/xml"
    "fmt"
    "io"
    "os"
    "sort"
    "unicode/utf8"

    "github.com/tawesoft/golib/v2/ks"
    "github.com/tawesoft/golib/v2/lazy"
)

type Char struct {
    Value string `xml:"value,attr"`
    Substitutes []string `xml:"substitute"`
}

func (c Char) Codepoint() rune {
    r, rZ := utf8.DecodeRuneInString(c.Value)
    ks.Assert(rZ == len(c.Value))
    return r
}

type Data struct {
    XMLName xml.Name `xml:"supplementalData"`
    Chars []Char   `xml:"characters>character-fallback>character"`
}

func main() {
    opener := func(name string) func() (io.ReadCloser, error) {
        return func() (io.ReadCloser, error) {
            return os.Open(name)
        }
    }

    var data Data
    ks.Check(ks.WithCloser(opener("../../DATA/cldr-41.0/common/supplemental/characters.xml"), func(f io.ReadCloser) error {
        return xml.Unmarshal(ks.Must(io.ReadAll(f)), &data)
    }))

    chars := data.Chars
    sort.Slice(chars, func(i int, j int) bool {
        return chars[i].Codepoint() < chars[j].Codepoint()
    })

    {
        dest := ks.Must(os.Create("../../../../text/fallback/subs.go"))
        defer dest.Close()

        dest.Write([]byte(`// Code generated by "internal/unicode/gen.sh"; DO NOT EDIT.

package fallback

type sub struct {
    codepoint rune
    alts []string
}

var subs = []sub{
`))

        quote := func(x string) string {
            return fmt.Sprintf("%q", x)
        }

        for _, c := range chars {
            dest.Write([]byte(fmt.Sprintf("    {0x%x, []string{%s}},\n",
                c.Codepoint(),
                lazy.Join(lazy.StringJoiner(", "),
                    lazy.Map(quote,
                        lazy.FromSlice(c.Substitutes))))))
        }

        dest.Write([]byte("}\n"))
    }
}
