// Code generated by internal/unicode/gen.sh - DO NOT EDIT.

package symbols

import (
    "bytes"
    "compress/gzip"
    _ "embed"
    "io"
    "strconv"

    "github.com/tawesoft/golib/v2/must"
)

type slice struct{left, right uint16}

// 791 bytes
var stringdata = "%(^)++\u200e,-.0/00;EINFMaLMdMNDNSNaNNuimhTFca.dáàshìdáàṣìeepilohoepälukumnnsan\u00a0dälson\u00a0emas~\u00a0··10^××10^×۱۰^ЕННТерхьаш\u00a0дацне\u00a0числосан\u00a0емессан\u00a0эмесчыыһыла\u00a0буотахҳақиқий\u00a0сон\u00a0эмасՈչԹ؉؉\u200f،؛\u061c+\u061c-\u061c−اسليس\u00a0رقمليس\u00a0رقمًاناعدد٪٪\u061c٪\u200f٫٬ບໍ່\u200bແມ່ນ\u200bໂຕ\u200bເລກགྲངས་མེདཨང་མདཨང་མེན་ဂဏန်းမဟုတ်သော၊არ\u00a0არის\u00a0რიცხვი\u200e%\u200e\u200e+\u200e+\u200e\u200e-\u200e-\u200e\u200e−\u200e−\u200e\u200f+\u200f-\u200f−’\u202f‰−∞∼≃≈⹁約非数值非數值𞤏𞤮𞤈"

//go:embed indexes.gz
var indexesGz []byte

//go:embed symbols.gz
var symbolsGz []byte

func ungz(src []byte) []byte {
    rdr := must.Result(gzip.NewReader(bytes.NewReader(src)))
    defer rdr.Close()
    return must.Result(io.ReadAll(rdr))
}

var indexes = func() map[string]int {
    v := make(map[string]int)
    data := ungz(indexesGz)
    for {
        idx1 := bytes.IndexByte(data, byte(':'))
        if idx1 < 0 { break }

        idx2 := bytes.IndexByte(data, byte(';'))
        if idx2 < 0 { break }

        key := string(data[0:idx1])
        value := string(data[idx1+1:idx2])
        v[key] = must.Result(strconv.Atoi(value))
        data = data[idx2+1:]
    }
    return v
}()

var symbolsdata = ungz(symbolsGz)
const symbolsRowSize = 42