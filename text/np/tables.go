package np

import (
    _ "embed"
    "sort"

    "github.com/tawesoft/golib/v2/operator"
)

// npBin contains packed Unicode data (not worth gziping) containing
// ordered spans of codepoints and their numeric properties
//go:embed np.bin
var npBin []byte // generated by internal/unicode/gen.sh

// Fraction is some (Numerator/Denominator)
type Fraction struct {
    Numerator int64
    Denominator int64
}

// span is the numeric property for some codepoint. If the span has a length,
// then there are codepoints at span.codepoint + i with nv.Numerator + i for
// i = 0 to span.lenght.
type span struct {
    codepoint rune // first character of the span
    nt int
    nv Fraction
    length int
}

// spans is a sorted list of span elements
var spans []span

// getspan returns a span for a codepoint. If not found, returns a zero span
// with codepoint zero and length zero.
func getspan(x rune) span {
    n := len(spans)
    i := sort.Search(n, func(i int) bool {
        s := spans[i]
        return int(x) <= int(s.codepoint) + (s.length - 1)
    })

    if (i == n) { return operator.Zero[span]() }
    s := spans[i]
    if (x < s.codepoint) || (int(x) >= int(s.codepoint) + s.length) {
        return operator.Zero[span]()
    }

    return s
}

func init() {
    n := len(npBin) / 8
    spans = make([]span, n)
    in := npBin

    for i := 0; i < n; i++ {
        v := 0 |
            (uint64(in[0])      ) |
            (uint64(in[1]) <<  8) |
            (uint64(in[2]) << 16) |
            (uint64(in[3]) << 24) |
            (uint64(in[4]) << 32) |
            (uint64(in[5]) << 40) |
            (uint64(in[6]) << 48) |
            (uint64(in[7]) << 56)
        in = in[8:]

        codepoint := rune(v & 0x1FFFFF)
        nt       := (v >> 21) & 3
        prefix   := (v >> (21 + 2)) & 0x0FFF
        trailing := (v >> (21 + 2 + 12)) & 0x3F
        d        := (v >> (21 + 2 + 12 + 6)) & 0x0FFF
        neg      := (v >> (21 + 2 + 12 + 6 + 12 + 8)) & 1
        length   := (v >> (21 + 2 + 12 + 6 + 12)) & 0xFF

        numerator := int64(prefix)
        for j := 0; j < int(trailing); j++ { numerator *= 10 }
        if neg != 0 { numerator = -numerator }

        spans[i] = span{
            codepoint: codepoint,
            nt: int(nt),
            nv: Fraction{
                Numerator:   numerator,
                Denominator: int64(d),
            },
            length: int(length),
        }
    }
}
